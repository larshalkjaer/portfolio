{
    "texts": {
        "title": "Portfolio",
        "backbutton_caption": {
            "da": "<< Tilbage til liste",
            "en": "<< Back to list"
        },
        "techlist_caption": {
            "da": "Anvendte teknologier: ",
            "en": "Technologies used: "
        },
        "resources_caption": {
            "da": "Resourcer: ",
            "en": "Resources: "
        },
        "role_caption": {
            "da": "Min rolle: ",
            "en": "My role: "
        },
        "year_caption": {
            "da": "År: ",
            "en": "Year: "
        },
        "sortoptions": {
            "da": {
                "Sortering (ingen)": "none",
                "Teknologier": "tech",
                "Årti": "decade",
                "Min rolle": "role",
                "App type": "apptype"
            },
            "en": {
                "Sorting (none)": "none",
                "Technologies": "tech",
                "Decade": "decade",
                "My role": "role",
                "App type": "apptype"
            }
        }        ,
        "languageoptions": {
            "Dansk": "da",
            "English": "en"
        },
        "sortkeynames": {
            "none": {
                "da": {
                    "none": "Alle"
                },
                "en": {
                    "none": "All"
                }
            },
            "role": {
                "da": {
                    "developer": "Udvikler",
                    "architect": "Arkitekt"
                },
                "en": {
                    "developer": "Developer",
                    "architect": "Architect"
                }
            },
            "tech": {
                "da": {
                    "captivate": "Adobe Captivate",
                    "cpp": "C++",
                    "delphipas": "Delphi Pascal",
                    "director": "Adobe Director",
                    "flashas3": "Flash og ActionScript 3",
                    "htmlcssjs": "HTML5, CSS og JavaScript",
                    "nodejs": "Node JS",
                    "storyline": "Articulate Storyline",
                    "unity": "Unity 3D"
                },
                "en": {
                    "captivate": "Adobe Captivate",
                    "cpp": "C++",
                    "delphipas": "Delphi Pascal",
                    "director": "Adobe Director",
                    "flashas3": "Flash and ActionScript 3",
                    "htmlcssjs": "HTML5, CSS and JavaScript",
                    "nodejs": "Node JS",
                    "storyline": "Articulate Storyline",
                    "unity": "Unity 3D"
                }
            },
            "decade": {
                "da": {
                    "90": "1990-1999",
                    "00": "2000-2009",
                    "10": "2010-2019",
                    "20": "2020-"
                },
                "en": {
                    "90": "1990-1999",
                    "00": "2000-2009",
                    "10": "2010-2019",
                    "20": "2020-"
                }
            },
            "apptype": {
                "da": {
                    "app": "Generel App",
                    "component": "Komponenter",
                    "course": "Kursus",
                    "framework": "Framework",
                    "game": "Spil",
                    "language": "Scriptsprog",
                    "pim": "PIM",
                    "tool": "Udviklingsværktøj"
                },
                "en": {
                    "app": "General App",
                    "component": "Components",
                    "course": "Course",
                    "framework": "Framework",
                    "game": "Game",
                    "language": "Scripting language",
                    "pim": "PIM",
                    "tool": "Developer tool"
                }
            }
        },
        "about": {
            "da": {
                "header": "Portfolio for Lars Halkjær",
                "description": "<p>Denne portfolio-side indeholder uddrag af de produkter, som jeg igennem årene har været med til at implementere, enten som udvikler, hvor jeg primært har være programmør, eller som arkitekt, hvor jeg også har lavet det tekniske design af produktet.</p><p>De steder, hvor det giver mening, har jeg optaget en sekvens af produktet som video.<br>Undtaget er produkter, der ikke er egentlige applikationer og produkter, der ikke længere findes i en eksekverbar tilstand.</p><p>Videoerne er klippet ned, for ikke at blive alt for lange – hvor der er større spring i udførelsen, er det markeret med en såkaldt box-turn-transition.</p><p>Listen kan sorteres på flere måder:</p><ul><li>Teknologier (Hvilken teknologi var bærende i implementeringen)</li><li>Årti (I hvilket årti blev produktet implementeret – det faktiske år kan ses på produktets side)</li><li>Min rolle (Var jeg udvikler eller arkitekt)</li><li>App type (Hvilken slags produkt, er der tale om?)</li></ul><p>Se detaljer for det enkelte produkt, ved at klikke på det i produktlisten.</p><h3>Selve siden</h3><p>Jeg valgte at implementere denne portfolio-side i Vue JS, da det er et værktøj, jeg har haft i kikkerten, men som jeg ikke har haft lejlighed til at arbejde med før.</p><p>Min udfordring til mig selv har været at sætte mig ind i Vue JS og få siden i luften på 2 måneder.</p><p>Koden til denne side kan ses på: <a href='https://github.com/larshalkjaer/portfolio' target='_blank'>github.com/larshalkjaer/portfolio</a></p><h3>Mig</h3><p>Flere oplysninger om mig, kan findes på min <a href='https://www.linkedin.com/in/lars-halkjaer/' target='_blank'>LinkedIn-side</a></p><img src='assets/lh.png'>"
            },
            "en": {
                "header": "Portfolio for Lars Halkjær",
                "description": "<p>This portfolio page contains excerpts of the products that I have helped to implement over the years, either as a developer, where I have primarily been a programmer, or as an architect, where I have also constructed the technical design of the product.</p><p>Where it makes sense, I have recorded a sequence of the product as video.<br>Except are products that are not actual applications and products that no longer exist in an executable state.</p><p>The videos are cut so as not to get too long — where there are major jumps in execution, it is marked with a box-turn transition.</p><p>The list can be sorted in several ways:</p><ul><li>Technologies (Which technology were the main one in the implementation)</li><li>Decade (In what decade it was implemented – the actual year can be viewed on the product's page)</li><li>My Role (Was I Developer or Architect)</li><li>App type (What kind of product is it?)</li></ul><p>See details for each product by clicking on it in the product list.</p><h3>This page</h3><p>I chose to implement this portfolio page in Vue JS as it is a tool I have had my eyes on for a while, but which I have not had the opportunity to work with.</p><p>My challenge to myself has been to learn Vue JS and get the page in the air in 2 months.<p><p>The code for this page can be found at: <a href='https://github.com/larshalkjaer/portfolio' target='_blank'>github.com/larshalkjaer/portfolio</a></p><h3>Me</h3><p>More information about me can be found on my LinkedIn page: </p><img src='assets/lh.png'>"
            }
        }
    },

    "products":
    [
        {
            "id": 1,
            "name": {
                "da": "Yellow Planner",
                "en": "Yellow Planner"
            },
            "description": {
                "da": "<p>Yellow Planner var en såkaldt PIM (Personal Information Manager – et begreb, meget udbredt i start-halvfemserne).</p><p>Den var en kombination af personlig kalender, fælles firma kalender med mødeplanlægning og hierakiske todo-lister, der kunne linkes til kalenderen.</p><p>Programmet var skrevet i Borland Delphi Pascal, og kunne forbindes til ODBC-databaser, således at man enten kunne anvende den lokalt på sin egen pc, eller koble den på en fælles firmadatabase, og udnytte mulighederne for mødeplanlægning og fælles kalenderoversigter.<br>En meget populær feature var \"receptionist-viewet\", hvor man kunne få et overblik over alles kalendere på én gang.</p><p><em>Jeg stod for udviklingen af brugergrænsefladen og de SQL-forespørgsler, der skulle udfylde de enkelte views.<br>Jeg stod også for dataudveksling med Hewlett-Packards håndholdte enheder, som fx <a href='http://www.hpmuseum.net/display_item.php?hw=198' target='_blank'>HP100LX</a>.</em><p>",
                "en": "<p>Yellow Planner was a so-called Personal Information Manager (PIM), a term widely used in the early nineties.</p> <p>It was a combination of personal calendar, shared company calendar with meeting scheduling, and hierarchical todo lists that could be linked to the calendar.</p> <p>The program was written in Borland Delphi Pascal, and could be connected to ODBC databases, so that you could either apply it locally to your own PC, or connect it to a common company database, and take advantage of the possibilities for scheduling meetings and shared calendar listings.<br> A very popular feature was the \"receptionist view\" where you could get an overview of everyone's calendars at once. </p> <p><em>I was responsible for developing the user interface and the SQL queries for the individual views.<br>I was also responsible for data exchange with Hewlett-Packard's handheld devices, such as <a href='http://www.hpmuseum.net/display_item.php?hw=198' target='_blank'>HP100LX</a>.</em><p>"
            },
            "decade":"90",
            "year":"1992",
            "image":"images/yellowplanner.png",
            "video":"",
            "apptype": "pim",
            "role":"developer",
            "resources": {"da": "", "en": ""},
            "tech":["delphipas"]
        },
        {
            "id": 2,
            "name": {
                "da": "Time Mananger for Windows",
                "en": "Time Mananger for Windows"
            },
            "description": {
                "da": "<p>Time Manager for Windows var en PIM, der byggede på kernen fra Yellow Planner programmet, og ligeledes implementeret i Borland Delphi Pascal med ODBC-database understøttelse.</p><p>Programmet implementerede principperne fra Time Managers papirkalendere, og havde derfor en stor grad af mulighed for at linke elementer til hinanden, og mulighed for automatisk at samle op på fx todos, der havde ventet for længe.</p><p>Brugergrænsefladen havde mange muligheder for, med musen at trække og slippe elementer mellem fx todo-liste og kalender, og for at ændre tidspunkter og varighed med musen (standard i dag, knap så udbredt i 1993…).</p><p><em>Jeg stod for udviklingen af brugergrænsefladen og de SQL-forespørgsler, der skulle udfylde de enkelte views.</em></p>",
                "en": "<p>Time Manager for Windows was a PIM based on the kernel of the Yellow Planner program, and also implemented in Borland Delphi Pascal with ODBC database support.</p><p>The program implemented the principles from Time Manager's paper calendars, and therefore had a high degree of ability to link items to each other, and the ability to automatically pick up e.g. todos that had waited too long.</p><p>The user interface used the mouse a lot to drag and drop items between e.g. todo list and calendar, and to change the times and duration with the mouse (default today, not as prevalent in 1993...). </p><p><em>I was in charge of developing the user interface and the SQL queries that would fill in each view.</em></p>"
            },
            "decade":"90",
            "year":"1993",
            "image":"images/timemanager.png",
            "video":"",
            "apptype": "pim",
            "role":"developer",
            "resources": {"da": "", "en": ""},
            "tech":["delphipas"]
        },
        {
            "id": 3,
            "name": {
                "da": "Magnus & Myggen 1",
                "en": "Skipper & Skeeto 1"
            },
            "description": {
                "da": "<p>Magnus & Myggen er en serie (10 i alt i min tid) af edutainment- og adventurespil for børn, om muldvarpen Magnus og hans ven Myggen.</p> <p>Spillene spænder fra deciderede indlærings- og træningsspil, til mere underholdningsprægede adventurespil med elementer af læring undervejs.</p> <p>Spillene fik Børnebibliotekarenes Kulturpris, og Thor-prisen som Bedste Danske Børnespil, 3 år i træk.</p> <p>Dette første spil er udviklet i Macromedia Director, der, på det pågældende tidspunkt, var et godt kompromis mellem performance og implementeringsarbejde.</p> <p><em>Jeg implementerede denne titel alene, da jeg på dette tidspunkt udgjorde den samlede udviklingsafdeling.<br>Og jeg stod for at undersøge og udvælge udviklingsplatformen.</em></p>",
                "en": "<p>Skipper & Skeeto is a series (10 in total in my time) of edutainment and adventure games for children, about the mole Skipper and his friend the mosquito Skeeto. </p> <p>Games range from learning and training games, to more entertainment adventure games with elements of learning along the way. </p> <p>The games received the Children's Librarians' Culture Prize, and the Thor Prize as Best Danish Children's Play, 3 years in a row. </p> <p>This first game was developed in Macromedia Director, which at the time was a good compromise between performance and implementation work. </p> <p><em>I implemented this title alone as I was the whole development department at the time. <br>And I was in charge of researching and selecting the development platform.</em></p>"
            },
            "decade":"90",
            "year":"1996",
            "image":"",
            "video": "video/magnus1",
            "apptype": "game",
            "role":"architect",
            "resources": {"da": "", "en": ""},
            "tech":["director"]
        },
        {
            "id": 4,
            "name": {
                "da": "IVANOFF Tools",
                "en": "IVANOFF Tools"
            },
            "description": {
                "da": "<p>Undervejs I udviklingsarbejdet med Magnus & Myggen spillene, opstod der en del arbejdsopgaver, som var egnede til en form for automatisering.</p><p>I sådan en situation ville vi som regel lede efter et eksisterende program, der kunne automatisere opgaven, men det var ikke altid muligt at finde et passende et.</p><p>Ud fra princippet \"Hvis man kan udvikle et program, der udfører et 10 timers job på 5 minutter, på 9 timer og 55 minutter, så er det en god investering\", udviklede jeg jævnligt små tool-programmer.</p><p>De var som regel implementeret i C++, da det var det, vi brugte til vore game-engine.<br> Typiske tools var compiler til ressource-filer (en samling af assets), forbehandling af grafik til animationer og sammenligning af fx filer i forskellige mapper.</p><p><em>Jeg stod for at designe og implementere programmerne.</em></p>",
                "en": "<p>Along the way In the development work of the Skipper & Skeeto games, a number of tasks were performed that were suitable for some form of automation.</p><p>In such a situation, we would usually look for an existing program that could automate the task, but it was not always possible to find a suitable one.</p><p>From the principle \"If you can develop a program that does a 10 hour task in 5 minutes, in 9 hours and 55 minutes, then it's a good investment\", I regularly developed small tool programs.</p><p>They were usually implemented in C++, as that's what we used for our game engine.<br> Typical tools were compiler for resource files (a collection of assets), preprocessing graphics for animations and comparing files etc. in different folders.</p><p><em>I was in charge of designing and implementing the applications.</em></p>"
            },
            "decade":"90",
            "year":"1997-2000",
            "image":"images/ivanofftools.png",
            "video":"",
            "apptype": "tool",
            "role":"architect",
            "resources": {"da": "", "en": ""},
            "tech":["cpp"]
        },
        {
            "id": 5,
            "name": {
                "da": "Magnus & Myggen 2-6",
                "en": "Skipper & Skeeto 2-6"
            },
            "description": {
                "da": "<p>Magnus & Myggen er en serie (10 i alt i min tid) af edutainment- og adventurespil for børn, om muldvarpen Magnus og hans ven Myggen.</p> <p>Spillene spænder fra deciderede indlærings- og træningsspil, til mere underholdningsprægede adventurespil med elementer af læring undervejs.</p> <p>Spillene fik Børnebibliotekarenes Kulturpris, og Thor-prisen som Bedste Danske Børnespil, 3 år i træk.</p> <p>Disse spil er udviklet i C++, 2'eren med et grafisk C++ bibliotek kaldet Media!Lab, og de efterfølgende i firmaets egen game-engine (IGL) med DirectX.</p> <p><em>I disse spil har jeg bl.a. stået for det tekniske design af game-engines, udvikling af scriptsprog-compilere, en del af implementeringen i C++, og udvikling af installationsprogrammer (samt været leder af udviklingsafdelingen).</em></p>",
                "en": "<p>Skipper & Skeeto is a series (10 in total in my time) of edutainment and adventure games for children, about the mole Skipper and his friend the mosquito Skeeto. </p> <p>Games range from learning and training games, to more entertainment adventure games with elements of learning along the way. </p> <p>The games received the Children's Librarians' Culture Prize, and the Thor Prize as Best Danish Children's Play, 3 years in a row. </p> <p>These games are developed in C++, the second with a graphical C++ library called Media!Lab, and the following ones in the company's own game engine (IGL) using DirectX.</p> <p><em>In these games, I was (among other things) responsible for the technical design of game engines, the development of scripting language compilers, part of the implementation in C++, and the development of installers (as well as being head of the development department).</em></p>"
            },
            "decade":"90",
            "year":"1997-2000",
            "image":"",
            "video": "video/magnus2-4",
            "apptype": "game",
            "role":"architect",
            "resources": {"da": "", "en": ""},
            "tech":["cpp"]
        },
        {
            "id": 6,
            "name": {
                "da": "IGL Framework",
                "en": "IGL Framework"
            },
            "description": {
                "da": "<p>Magnus & Myggen 1, det allerførste spil vi lavede, var implementeret i multimedieværktøjet Macromedia Director.</p><p>En af de væsentlige svagheder ved dette værktøj var, at kode meget hurtigt kunne blive viklet ind i den monterede grafik og animationer.<br> Kode kunne typisk placeres på de enkelte monterede elementer, og således føre til et uoverskueligt virvar af kodestumper, der vanskeliggjorde både overblik og vedligeholdelse.</p><p>Jeg var derfor fra starten opmærksom på, at koden skulle samles i en form for bibliotek, så man i montering blot kunne specificere, hvad der skulle ske det pågældende sted, i en deklarativ form.<br> Dette blev vores første game-framework.</p><p>Vi besluttede imidlertid at skifte platform til C++ for det næste spil, men vi tog erfaringerne med, og implementerede en game-framework, med udgangspunkt i et C++ multimediabibliotek kaldet Media!Lab.<br> Vi fik senere overdraget sourcekoden til dette, da vi hjalp med at finde nogle drilske multithreading-fejl i lydmodulet.</p><p>Men da vi satsede på Windows-markedet, udviklede vi et DirectX baseret framework (IGL – Ivanoff Game Library), som vi anvendte til alle de efterfølgende spil.</p><p>Det var et mål ikke at lave et alt for rigidt framework, der var baseret på at lave adventure-lignende spil, men i stedet et game-library, som også indeholdt klasser, der var på applikationsniveau og som kunne fungere som et basalt framework.</p><p><em>Jeg stod for at lede designet af de forskellige biblioteker, for en del af implementeringen og for at udvikle værktøjer omkring det.</em></p>",
                "en": "<p>Skipper & Skeeto 1, the very first game we made was implemented in the Macromedia Director multimedia tool.</p><p>One of the significant weaknesses of this tool was that code very quickly could become entangled in the mounted graphics and animations.<br> Code could typically be placed on the individual mounted elements, thus leading to an unmanageable jumble of snippets of code that made both overview and maintenance difficult.</p><p>I was therefore aware from the start that the code had to be assembled into some kind of library so that you could simply specify what was going to happen in that location in a declarative form.<br> This became our first game-framework.</p> However, we decided to switch the platform to C++ for the next game, but we took the experience with us and implemented a game-framework based on a C++ multimedia library called Media!Lab.<br> We were later handed over the source code for this, as we helped find some mischievous multithreading errors in the audio module.</p><p>But as we aimed for the Windows market, we developed a DirectX based framework (IGL – Ivanoff Game Library) that we used for all subsequent games.</p><p>It was a goal not to create an overly rigid framework based on creating adventure-like games, but instead a game library that also contained application-level classes that could serve as a basic framework.</p><p><em>I was in charge of leading the design of the different libraries, for part of the implementation, and for developing tools around it.</em></p>"
            },
            "decade":"90",
            "year":"1998",
            "image":"images/igl.png",
            "video":"",
            "apptype": "framework",
            "role":"architect",
            "resources": {
                "da": "Et par eksempler på dokumentation fra udviklingen af IGL, som jeg har udarbejdet: <a href='resources/igl_dd_draft.pdf' target='_blank'>Designdokument for drag and drop funktionaliteten</a> og <a href='resources/igl_dd_doc.pdf' target='_blank'>dokumentation af drag and drop funktionaliteten</a>.",
                "en": "A few examples of documentation frem the development of the IGL: <a href='resources/igl_dd_draft.pdf' target='_blank'>Design document for drag and drop functionality</a> and <a href='resources/igl_dd_doc.pdf' target='_blank'>Documentation of drag and drop functionality</a>."
            },
            "tech":["cpp"]
        },
        {
            "id": 7,
            "name": {
                "da": "LEGO Friends",
                "en": "LEGO Friends"
            },
            "description": {
                "da": "<p>LEGO Friends et et aktivitetsspil, primært henvendt til piger, og fokuseret omkring en gruppe af veninder, som vil lave deres eget musikshow til skolens fest. </p><p>Gennem forskellige aktiviteter, skal spillerne opbygge et musik-, danse- og sceneshow, ud fra en række præfabrikerede \"klodser\", f.eks. musik-riffs, dansetrin osv. </p><p><em>Programmet er udviklet i C++. Jeg stod for det tekniske design, det meste af implementeringen (baseret på den game-engine, der allerede var udviklet til Magnus & Myggen spillene), samt installationsprogrammer.<br> Jeg stod desuden for den tekniske koordinering med LEGO Media, herunder aftestning hos 3. parts testhouse.</em><p>",
                "en": "<p>LEGO Friends is an activity game, primarily aimed at girls, and focused around a group of girlfriends who want to create their own music show for the school party.</p><p>Through various activities, players must build a music, dance and stage show, based on a series of prefabricated \"bricks\", for example. music riffs, dance moves, etc.</p><p><em>The program is developed in C++. I oversaw the technical design, most of the implementation (based on the game-engine that was already developed for the Skipper & Skeeto games), as well as installation programs. <br>I was also responsible for technical coordination with LEGO Media, including testing at a 3rd party test house.</em><p>"
            },
            "decade":"90",
            "year":"1999",
            "image":"",
            "video": "video/legofriends",
            "apptype": "game",
            "role":"architect",
            "resources": {"da": "", "en": ""},
            "tech":["cpp"]
        },
        {
            "id": 8,
            "name": {
                "da": "ISL Scriptsprog",
                "en": "ISL Script language"
            },
            "description": {
                "da": "<p>Da vi havde udviklet et game-library/-framework (IGL Framework), så vi kunne genbruge og hard-code vores erfaringer med implementering af game-engines, blev det næste problem at gøre det samme med spillenes egen logik.</p><p>Især adventurespil kan være omstændelige at kode i et traditionelt all-round programmeringssprog (især hvis man, som mig, foretrække deklarativ programmering), så vi besluttede at udvikle et DSL scriptsprog til spiludvikling.</p><p>Sproget skulle gøre det muligt i højere grad at arbejde deklarativt med spil-logik, samtidigt med, at det ikke skulle knyttes op på en specifik game-engine. </p><p>Vi udviklede et scriptsprog, som via et LEX/YACC-lignende værktøj kaldet VisualParse, blev til en compiler og fortolker, hvor den sidstnævnte kunne knyttes til enhver C++ game-engine, via header-filer med information om funktioner i den pågældende game-engine.</p><p>For de interesserede er der under Ressourcer her på siden, et link til et uddrag af manualen til scriptsproget, hvor den beskrives i flere detaljer.</p><p><em>Jeg stod for at udvikle sprogets syntaks, implementere compiler og fortolker og skrive manual og anden dokumentation.</em></p>",
                "en": "<p>When we had developed a game library/framework (IGL Framework) so that we could reuse and hard-code our experience implementing game-engines, the next problem was to do the same with the games' own logic.</p><p>Especially adventure games can be laborious to code in a traditional all-round programming language (especially if, like me, one prefers declarative programming), so we decided to develop a DSL scripting language for game development.</p><p>The language should allow you to work more declaratively with game logic, while not attaching it to a specific game engine.</p><p>We developed a scripting language that, through a LEX/YACC-like tool called VisualParse, became a compiler and interpreter where the latter could be associated with any C++ game engine, via header files with information about functions in that game engine.</p><p>For those interested, under Resources on this page, a link to a excerpt of the scripting language manual describes it in more detail.</p><p><em>I was responsible for developing the language syntax, implementing the compiler and interpreter and writing manual and other documentation.</em></p>"
            },
            "decade":"90",
            "year":"1999",
            "image":"images/isl.png",
            "video":"",
            "apptype": "language",
            "role":"architect",
            "resources": {
                "da": "Et par eksempler på dokumentation for ISL scriptsproget, som jeg har udarbejdet: <a href='resources/isl_guide_uddrag.pdf' target='_blank'>Uddrag af bruger guide</a> og <a href='resources/isl_fortolker_opcodes.pdf' target='_blank'>dokumentation af fortolkerens opcodes</a>.",
                "en": "A few examples of documentation for the ISL scripting language that I have prepared: <a href='resources/isl_guide_uddrag.pdf' target='_blank'>Excerpt from user guide</a> og <a href='resources/isl_fortolker_opcodes.pdf' target='_blank'>Documentation of interpreter opcodes</a>."
            },
            "tech":["cpp"]
        },
        {
            "id": 9,
            "name": {
                "da": "Magnus & Myggen, Talbutikken",
                "en": "Skipper & Skeeto, The Number Shop"
            },
            "description": {
                "da": "<p>Talbutikken er, i modsætning til de foregående Magnus & Myggen adventurespil, et rendyrket læringsspil.</p><p>Spillet er bygget op omkring en historie, hvor Magnus & Myggen laver en bytte-butik og de andre beboerne i Paradisparken kommer forbi for at se, hvad der foregår.</p><p>De har imidlertid alle travlt med forskellige gøremål, og Magnus & Myggen må hjælpe dem med disse, for at få kunder i butikken – og det viser sig på forunderlig vis, at alle opgaverne har med matematik at gøre…</p><p>Game-enginen til dette spil, var anderledes en de tidligere, og det blev derfor en test af, hvorvidt ISL scriptsproget kunne tilpasses denne engine, og om scriptsproget var egnet til denne type spil (begge dele viste sig at fungere).</p><p><em>Jeg har stået for spillets tekniske design, implementering og for script-skrivningen.</em></p>",
                "en": "<p> The Number Shop is, unlike the previous Skipper & Skeeto adventure games, a pure learning game.</p><p>The game is built around a story where Skipper & Skeeto creates a swap shop and the other residents of Paradise Park come by to see what's going on.</p> However, they are all busy with different chores, and Skipper & Skeeto must help them with these to get customers in the store – and it turns out that all the tasks have to do with mathematics... </p><p>The game engine for this game was different than the previous ones, and it was therefore a test of whether the ISL scripting language could be adapted to this engine and whether the scripting language was suitable for this type of game (both turned out to work ok).</p><p><em>I have been in charge of the game’s technical design, implementation, and script writing.</em></p>"
            },
            "decade":"00",
            "year":"2001",
            "image":"",
            "video": "video/magnus123",
            "apptype": "game",
            "role":"architect",
            "resources": {"da": "", "en": ""},
            "tech":["cpp"]
        },
        {
            "id": 10,
            "name": {
                "da": "SuperStarter",
                "en": "SuperStarter"
            },
            "description": {
                "da": "<p>SuperStarter er et \"try & buy\" system til online salg af programmer, hvor kunden kan downloade en 30 minutters prøveversion af programmet, og derefter vælge at købe en aktiveringsnøgle på nettet, hvorved man får en fuldgyldig version.</p><p>SuperStarteren er et lille program, der downloades fra webshoppen, og som fungerer som en oversigt over alle programmer i en serie (f.eks. Magnus & Myggen spillene, som den blev udviklet til), dels med status for de forskellige spil (har kunden købt det, hvor mange minutters spilletid, er der i modsat fald tilbage på prøveversionerne, eller er det endnu ikke downloadet), dels som et kontrolpanel, hvor man nemt kan starte downloadede spil, eller købe nye i webshoppen. </p><p><em>Jeg har udviklet selve SuperStarter programmet i C++, en del af logikken bag systemet, samt API til implementering af systemet, i selve programmerne.</em></p>",
                "en": "<p>SuperStarter is a \"try & buy\" system for online sales of programs where the customer can download a 30 minute trial version of the program, and then choose to purchase an activation key on the web, thereby getting a full-fledged version.</p><p>The SuperStarter is a small application that is downloaded from the webshop and serves as an overview of all applications in a series (e.g. The Skipper & Skeeto games for which it was developed), partly with the status of the different games (has the customer bought it, how many minutes of playing time is left on the trials or is not yet downloaded), and partly as a control panel where you can easily start downloaded games, or buy new ones in the webshop.</p><p><em>I have developed the SuperStarter program itself in C++, part of the logic behind the system as well as the API for implementing the system in the programs themselves.</em></p>"
            },
            "decade":"00",
            "year":"2002",
            "image":"images/superstarter.png",
            "video":"",
            "apptype": "app",
            "role":"architect",
            "resources": {"da": "", "en": ""},
            "tech":["cpp"]
        },
        {
            "id": 11,
            "name": {
                "da": "BAR Kontorindretning",
                "en": "BAR Kontorindretning"
            },
            "description": {
                "da": "<p>'BAR Kontorindretning' er beregnet på, med udgangspunkt i brugerens egen kontorindretning, at oplyse om regler og anbefalinger, for god og ergonomisk indretning af kontorer.</p><p>Brugeren indretter er kontor på skærmen, med udgangspunkt i sit eget kontor, og får undervejs en række gode råd og anbefalinger.</p><p>Til sidst kan udskrives en rapport, med alle de givne råd.</p><p> Programmet er udviklet i Flash og anvender Flash SharedObjects til at gemme brugerens indretning mellem sessioner.</p><p><em>Jeg har designet interaktionen og implementeret applikationen.</em></p>",
                "en": "<p>'Bar Kontorindretning' is intended to inform about rules and recommendations for good and ergonomic layout of offices, based on the user's own office.</p><p>The user layouts an office on the screen, based on his own office, and along the way he receives a number of recommendations and good advice.</p><p>Eventually a report can be printed, with all the advice given.</p><p>Developed in Flash, the program uses Flash SharedObjects to store the user's layout between sessions.</p><p><em>I designed the interaction and implemented the application.</em></p>"
            },
            "decade":"00",
            "year":"2004",
            "image":"",
            "video": "video/barkontor",
            "apptype": "app",
            "role":"architect",
            "resources": {"da": "", "en": ""},
            "tech": ["flashas3"]
        },
        {
            "id": 12,
            "name": {
                "da": "Pfizer epios",
                "en": "Pfizer epios"
            },
            "description": {
                "da": "<p>'Pfizer epios' er udviklet til brug for læger og deres patienter, med henblik på, at give lægen et visualiserings-værktøj, der dækker en række almindeligt forekommende sygdomme.</p><p>Lægen kan bruge værktøjet, til at forklare patienten om sygdommen, og efterføgende udskrive teksten til forklaringen, tilføjet egne noter, specifikt til patienten.</p><p>Værktøjet gør brug af video med tilhørende speak, der desuden findes på 6 sprog, og hjælper således med at løse, nogle af de sprogproblemer, der ofte opstår.</p><p>Patienten kan, udover at få den trykte tekst med lægens noter med hjem, også se og høre forløbet igen, på deres egen pc.</p><p>Værktøjet er implementeret i Flash og gør brug af FLV video.</p><p><em>Jeg har oprindeligt udviklet programmet til cd-rom, i Adobe Director og senere porteret det til websitebrug i Flash.</em></p>",
                "en": "<p>'Pfizer epios' has been developed for use by doctors and their patients in order to provide the doctor with a visualization tool covering a variety of commonly occurring diseases.</p><p>The doctor can use the tool to explain the patient about the disease and then print the explanation, adding his own notes specifically for the patient.</p><p>The tool uses video and speech which is available in 6 languages and thus helps to solve some of the language problems that often occur.</p><p>In addition to getting the printed text with the doctor's notes back, the patient can also watch the explanation again on their own PC.</p><p>The tool is implemented in Flash and uses FLV video.</p><p><em>I originally developed the program for CD-ROM in Adobe Director and later ported it for website use in Flash.</em></p>"
            },
            "decade":"00",
            "year":"2006",
            "image":"images/pfizerepios.png",
            "video":"",
            "apptype": "app",
            "role":"architect",
            "resources": {"da": "", "en": ""},
            "tech": ["director", "flashas3"]
        },
        {
            "id": 13,
            "name": {
                "da": "ToonPaper",
                "en": "ToonPaper"
            },
            "description": {
                "da": "<p>Toonpaper er en viewer, til at præsenterer indhold på nettet, i \"bladre-bar\" form.</p><p>Brugerne kan med musen bladre i siderne som i et almindeligt blad (eller anvende navigationsknapperne på toolbaren), hoppe til et indtastet sidenummer, eller zoome ind på en side, ved at klikke på den.</p><p>Vieweren en implementeret i Flash, og data for siderne er angivet i en xml-fil, således at sider kan tilføjes og ændres i størrelse, uden at ændre i selve vieweren.</p><p><em>Jeg har designet og implementeret vieweren.</em></p>",
                "en": "<p>Toonpaper is a viewer that presents content on the web, in \"flipable\" form.</p><p>Users can, using the mouse, flip the pages as in a regular magazine (or use the navigation buttons on the toolbar), input and jump to a page number or zoom in on a page by clicking it. </p><p>The viewer is implemented in Flash, and data for the pages is specified in an xml file so that pages can be added and resized without changing the viewer itself. </p><p><em>I have designed and implemented the viewer.</em></p>"
            },
            "decade":"00",
            "year":"2007",
            "image":"",
            "video": "video/toonpaper",
            "apptype": "app",
            "role":"architect",
            "resources": {"da": "", "en": ""},
            "tech":["flashas3"]
        },
        {
            "id": 14,
            "name": {
                "da": "eFrame Flash Framework",
                "en": "eFrame Flash Framework"
            },
            "description": {
                "da": "<p>Før jeg lavede dette framework, var firmaets kurser i Flash som regel lavet 100% i Adobe Flash applikationen.</p><p>Dette indebærer nogle af de samme problemer, som jeg har nævnt under Director-værktøjet (Magnus & Myggen 1): Koden bliver hurtigt spredt ud over de monterede scener i kurset, hvilket gør overblik (og dermed vedligeholdelse) vanskelig.</p><p>Det begrænser også genbrug af kode, hvilket let kan gå ud over kvaliteten, og man får ikke nedfældet sine erfaringer i selve koden.</p><p>Adobe have udsendt Flex Builder 3, som er et Flash/ActionScript-baseret udviklingsmiljø, som tog udgangspunkt i ActionScript, hvor Flash tager udgangspunkt i at sætte assets op på en tidslinje.</p><p>Jeg besluttede at vende udviklingen på hovedet, og lade et ActionScript-baseret framework og library være udgangspunktet, og lade Flash-animationer være en bekvem måde at montere medier og animationer til kurset, og dermed lade Flash blive et medie i frameworket.</p><p>Da det er væsentligt for mig, ikke at trække tæppet væk under folks normale work-flow med nye tiltag, kunne denne løsning lade de, der monterer kursets assets, arbejde som normalt – blot i mindre, mere håndterbare bidder, hvilket var en fordel for de fleste (det betød også, at flere \"montører\" kunne arbejde på samme projekt, blot på hver sin Flash-fil).</p><p>For at gøre frameworket mere tilgængeligt (for ikke-programmører), definerer man kursets struktur i nogle XML-filer: en for selve strukturen, med links til flash-assets og definition af kursets flow, og en med kursets tekster, således at det blev lettere at oversætte kurset, og lave kurser, hvor man kan skrifte sprog.</p><p>Dette betød at programmøren blot i starten skulle sætte en engine op ud fra framework/library-filerne, og derefter kan andre arbejde med Flash og XML-filerne. </p><p><em>Jeg designede framework og library, XML-strukturerne og implementerede engines til de forskellige kurser.</em></p>",
                "en": "<p>Before I created this framework, the company's courses in Flash were usually made 100% in the Adobe Flash application.</p><p>This involves some of the same problems that I have mentioned under the Director tool (Skipper & Skeeto 1): The code is quickly spread across the mounted scenes of the course, making overview (and thus maintenance) difficult.</p><p>It also restricts code reuse, which can easily compromise quality, and you don't get your experience embedded in the code itself.</p><p>Adobe had deployed Flex Builder 3, a Flash/ActionScript-based development environment based on ActionScript, where Flash is based on placing assets on a timeline.</p><p>I decided to turn the development model upside down and let an ActionScript-based framework and library the starting point, and let Flash animations be a convenient way to mount media and animations for the course, thus allowing Flash to become a medium in the framework.</p><p>Since it is essential for me not to pull the rug away from under people's normal work-flow with new initiatives, this solution could let those who mount the course assets work as normal – just in smaller, more manageable chunks, which was beneficial to most (it also meant that multiple \"assemblers\" could work on the same project, just on separate Flash files).</p><p>To make the framework more accessible (for non-programmers), the course structure is defined in some XML files: one for the structure itself, with links to the flash asset files and a definition of course flow, and one with the course texts to make it easier to translate the course, and create courses where you can swirch languages.</p><p>This meant that the programmer simply initially had to set up an engine from the framework/library files, and then others can work with Flash and the XML files. </p><p><em>I designed the framework and library, the XML structures, and implemented engines for the various courses.</em></p>"
            },
            "decade":"10",
            "year":"2009-2016",
            "image":"images/eframe.png",
            "video":"",
            "apptype": "framework",
            "role":"architect",
            "resources": {"da": "", "en": ""},
            "tech":["flashas3"]
        },
        {
            "id": 15,
            "name": {
                "da": "Personlig Planlægning",
                "en": "Personal Planning"
            },
            "description": {
                "da": "<p>Kurset er i højere grad opbygget efter en storytelling-model, end tidligere kurser lavet i vores eFrame framework.</p><p>Dette stillede også nye krav til frameworket – dels om nye interaktionsformer og dels om at kunne gemme flere data om forløbet, for at kunne anvende dem senere.</p><p>Det kunne løses indenfor frameworkets rammer ved at bygge en række nye komponenter, der kunne scriptes via XML-filerne i frameworket.</p><p><em>Jeg designede og implementerede de nye komponenter, satte en engine op og lavede en del af scriptingen.</em></p>",
                "en": "<p>The course is designed more after a storytelling model than previous courses created in our eFrame framework.</p><p>This also made new demands on the framework – both for new forms of interaction and for being able to store more data about the course in order to use it later.</p><p>This could be solved within the framework by building a number of new components that could be scripted through the XML files in the framework.</p><p><em>I designed and implemented the new components, set up an engine, and did part of the scripting.</em></p>"
            },
            "decade":"10",
            "year":"2012",
            "image":"",
            "video": "video/mochplanning",
            "apptype": "course",
            "role":"architect",
            "resources": {"da": "", "en": ""},
            "tech":["flashas3"]
        },
        {
            "id": 16,
            "name": {
                "da": "Q8, Røveren",
                "en": "Q8, The Robber"
            },
            "description": {
                "da": "<p>Q8, Røveren var baseret på vores eFrame-framework, men introducerede en ny komponent, hvor man ud fra en video, efterfølgende kan foretage et valg, der leder til nye videoer.</p><p>Dette var et scenario der var velkendt for mig fra adventurespil-genren, og kunsten var primært at få det til at passe ind i frameworkets design, så det let kunne scriptes via XML, som de eksisterende komponenter.</p><p>Det blev i øvrigt et af de sidste kurser baseret på eFrame og Flash, så komponenten selv, fik ikke så lang levetid.</p><p><em>Jeg stod for design af nye komponenter, implementering af engine og scripting af kurset.</em></p>",
                "en": "<p>Q8, The Robber was based on our eFrame framework, but introduced a new component where, based on a video, you can subsequently make a choice that leads to new videos.</p><p>This was a scenario familiar to me from the adventure game genre, and the challenge was primarily to get it to fit into the framework design so that it could be easily scripted via XML, as the existing components.</p><p>It was also one of the last courses based on eFrame and Flash, so the component itself didn't get as long a lifetime.</p><p><em>I was responsible for designing new components, implementing the engine and scripting the course.</em></p>"
            },
            "decade":"10",
            "year":"2013",
            "image":"",
            "video": "video/q8roeveren",
            "apptype": "course",
            "role":"developer",
            "resources": {"da": "", "en": ""},
            "tech":["flashas3"]
        },
        {
            "id": 17,
            "name": {
                "da": "Offshore Sikkerhed",
                "en": "Offshore Safety"
            },
            "description": {
                "da": "<p>Offshore Sikkerhed blev implementeret i Adobe Captivate, som er et kursusudviklingsværktøj, der kan publicere et kursus til både Flash og HTML5 format. </p><p>Dette blev vigtigt i en periode, hvor Flash var på vej ud, men ikke alle kunne håndtere HTML5.</p><p>Værktøjet havde to begrænsninger.<br> Dels kunne det (på det tidspunkt) ikke håndtere så store kurser, og dels er det let at komme til at sprede scripting-kode for meget ud over de enkelte opsatte scener.</p><p>Det første var et problem, fordi kurset var ret stort, og det andet var et problem fordi det besværliggør vedligeholdelse og gør det vanskeligere at fejlfinde.</p><p>Jeg udviklede en HTML/JavaScript skal, der tillod at afvikle flere separate kursusfiler som ét kursus.<br> Samtidig fungerede det som et repository til dataudveksling mellem de ellers separate kurser, og dels kunne noget af den mere indviklede programmering foretages i separate JavaScript-filer, som kunne kaldes fra Captivate-modulerne.</p><p><em>Jeg implementerede HTML/JavaScript-skallen, der tillod flere Captivate-moduler at fungerer som ét kursus, lavede et template-modul i Captivate, der tillod andre at implementere de enkelte moduler på en ensartet måde, og uden at kende til den underliggende HTML/JavaScript-skal. Jeg implementerede desuden et værktøj til automatisk at pakke de separate moduler sammen til et færdigt kursus.</em><p>",
                "en": "<p>Offshore Security was implemented in Adobe Captivate, a course development tool that can publish a course for both Flash and HTML5 format.</p><p>This became important during a period when Flash was on its way out, but not everyone could handle HTML5.</p><p>The tool had two limitations.<br> On the one hand, it could not (at the time) handle such large courses, and on the other hand it is easy to scatter scripting code too much in the individual scenes.</p><p>The first was a problem because the course was quite large and the second was a problem because it complicates maintenance and makes it more difficult to troubleshoot.</p><p>I developed an HTML/JavaScript shell that allowed multiple separate course files to run as one course.<br> At the same time, it served as a repository for data exchange between the otherwise separate courses, and some of the more intricate programming could be done in separate JavaScript files, which could be called from the Captivate modules.</p><p><em>I implemented the HTML/JavaScript shell that allowed multiple Captivate modules to work as one course, created a template module in Captivate that allowed others to implement each module in a consistent way, and without knowing the underlying HTML/JavaScript shell. I also implemented a tool to automatically package the separate modules into a finished course.</em><p>"
            },
            "decade":"10",
            "year":"2014",
            "image":"",
            "video": "video/dongoffshore",
            "apptype": "course",
            "role":"architect",
            "resources": {"da": "", "en": ""},
            "tech":["captivate"]
        },
        {
            "id": 18,
            "name": {
                "da": "Diabetes, Bevar livsglæden",
                "en": "Diabetes, Having a good life"
            },
            "description": {
                "da": "<p>Kurset blev implementeret i Articulate Storyline, som er et kursusudviklingsværktøj, der kan publicere et kursus til både Flash og HTML5 format. </p><p>Dette blev vigtigt i en periode, hvor Flash var på vej ud, men ikke alle kunne håndtere HTML5.<br> Storyline havde mere avancerede scripting-muligheder en Adobe Captivate, som var det andet værktøj vi anvendte i denne overgangsperiode.</p><p>Kurset er et klassisk page-turner kursus, der primært skal formidle oplysende stof, og er bevidst holdt enkelt, for at være tilgængeligt for en bred målgruppe.<br> Det er derfor også vigtigt at kurset anvender en enkel interaktionsform og en robust i sin navigation.</p><p><em>Jeg har implementeret den grundlæggende kursusstruktur i Storyline, således at andre, uden at skulle anvende meget scripting, kunne bygge indholdet.</em><p>",
                "en": "<p>The course was implemented in Articulate Storyline, a course development tool that can publish a course in both Flash and HTML5 format. </p><p>This became important during a period when Flash was on its way out, but not everyone could handle HTML5.<br> Storyline had more advanced scripting capabilities than Adobe Captivate, which was the second tool we used during this transition period.</p><p>The course is a classic page-turner course primarily designed to convey informational material, and is deliberately kept simple, to be accessible to a broad audience.<br> It is therefore also important that the course uses a simple form of interaction and is robust in its navigation.</p><p><em>I have implemented the basic course structure in Storyline so that others, without having to use much scripting, could build the content.</em><p>"
            },
            "decade":"10",
            "year":"2016",
            "image":"",
            "video": "video/sdsidiabetes",
            "apptype": "course",
            "role":"developer",
            "resources": {"da": "", "en": ""},
            "tech":["storyline"]
        },
        {
            "id": 19,
            "name": {
                "da": "Persondataloven",
                "en": "Privacy law"
            },
            "description": {
                "da": "<p>Kurset blev implementeret i Articulate Storyline, som er et kursusudviklingsværktøj, der kan publicere et kursus til både Flash og HTML5 format.</p> <p>Storyline kunne (på det tidspunkt, og i lighed med Adobe Captivate) ikke håndtere så store kurser, så som tidligere med Captivate, udviklede jeg en HTML/JavaScript-skal, der tillod at afvikle flere separate kursusfiler som ét kursus.<br> Og en del af den mere avancerede beregning af point i kurset (som kunne udløse guld- sølv- og bronze-stjerner), kunne lægges ud i JavaScript filer, da Storylines scriptingsprog ikke rigtigt egner sig til beregningstunge opgaver.</p> <p>En lille gimmick i kurset er, at kursisten vælger en avatar i starten af kurset, som følger vedkommende gennem hele forløbet.</p> <p><em>Jeg implementerede HTML/JavaScript-skallen, der tillod flere Storyline-moduler at fungerer som ét kursus, lavede et template-modul i Storyline, der tillod andre at implementere de enkelte moduler på en ensartet måde, og uden at kende til den underliggende HTML/JavaScript-skal. Jeg implementerede desuden et værktøj til automatisk at pakke de separate moduler sammen til et færdigt kursus.</em><p>",
                "en": "<p>The course was implemented in Articulate Storyline, a course development tool that can publish a course for both Flash and HTML5 format.</p> <p>Storyline could (at that time, like Adobe Captivate) not handle such large courses, so like previously with Captivate, I developed an HTML/JavaScript shell that allowed multiple separate course files to run as one course.<br> And part of the more advanced calculation of points in the course (which could trigger gold, silver, and bronze stars) could be implemented in JavaScript files, as Storyline's scripting language is not really suitable for calculating tasks.</p> <p>A small gimmick in the course is that the student selects an avatar at the beginning of the course that follows them throughout the course.</p> <p><em>I implemented the HTML/JavaScript shell that allowed multiple Storyline modules to work as one course, created a template module in Storyline that allowed others to implement each module in a consistent way, and without knowing the underlying HTML/JavaScript shell. I also implemented a tool to automatically package the separate modules into a finished course.</em><p>"
            },
            "decade":"10",
            "year":"2016",
            "image":"",
            "video": "video/modstpersondata",
            "apptype": "course",
            "role":"architect",
            "resources": {"da": "", "en": ""},
            "tech":["storyline", "htmlcssjs"]
        },
        {
            "id": 20,
            "name": {
                "da": "Service på DSB'sk",
                "en": "Service the DSB way"
            },
            "description": {
                "da": "<p>Kurset blev implementeret i Adobe Captivate, da kunden i forvejen anvendte dette værktøj.</p> <p>Der er to afsnit i kurset: et afsnit, der præsenterer stoffet på en traditionel facon, og et spil, der tester kursistens viden, designet som en togrejse fra Frederikshavn til Frederikssund.</p> <p>Den første del er præcis hvad Captivate er lavet til, mens den mere spilprægede del kan give nogle hovedbrud.</p> <p>Udfordringen var at få Captivates relativt begrænsede scriptsprog til at opsamle de resultater, som man opnår undervejs, så de kan anvendes til at styre forløbet – scener i Captivate er grundlæggende statisk opsatte, så enten skal man sætte alle tænkelige kombinationer op (et problem i forbindelse med evt. udvidelser eller rettelser, og en stor grad af redundans), eller også skal man forsøge at udnytte de muligheder der er, på en anden måde.</p> <p>Det lykkedes at få spillet til at fungere som ønsket, uden at lave overflødige redundans i opsætningen.</p> <p><em>Jeg stod for teknisk design og implementering af kurset, og montering af assets og animationer.</em></p>",
                "en": "<p>The course was implemented in Adobe Captivate as the customer was already using this tool.</p> <p>There are two sections in the course: a section that presents the content in a traditional way, and a game that tests the student's knowledge, designed as a train journey from Frederikshavn to Frederikssund.</p> <p>The first part is exactly what Captivate is made for, while the more game-like part can cause some headache.</p> <p>The challenge was to get Captivate's relatively limited scripting language to capture the results that you achieve along the way so that they can be used to control the course — scenes in Captivate are basically static, so either you have to set up every possible combination (a problem with possible extensions or corrections, and a high degree of redundancy), or try to take advantage of the opportunities available in a different way.</p> <p>I managed to get the game to work as desired without making unnecessary redundancy in the setup.</p> <p><em>I was in charge of technical design and implementation of the course, and setting up assets and animations.</em></p>"
            },
            "decade": "10",
            "year":"2017",
            "image":"",
            "video": "video/servicepaadsbsk",
            "apptype": "course",
            "role":"architect",
            "resources": {"da": "", "en": ""},
            "tech":["captivate"]
        },
        {
            "id": 21,
            "name": {
                "da": "MABS build system",
                "en": "MABS build system"
            },
            "description": {
                "da": "<p>På et tidspunkt da Flash var på vej ud, og de fleste anvender HTML5 browsere, besluttede vi at finde et værktøj, der kunne lave kurser i ren HTML5.</p><p>Det måtte godt være åbent, så vi selv havde mulighed for at udvide på det, og gerne Open Source, så vi ikke blev afhængig af en én bestemt leverandør.</p><p>Vi endte med at anvende <a href='https://www.adaptlearning.org/' target='_blank'>Adapt Framework</a>, som samtidigt gjorde op med page-turner typen af kurser, som Flash og værktøjer som Captivate og Storyline havde lagt grunden til, og i stedet opbyggede kurser på samme måde som web-sider, som de fleste efterhånden var blevet fortrolige med. </p><p>Adapt består af et framework, der er opbygget som en kerne med en række plug-ins, der både kan definere UI komponenter i kurset, og udvidelser af frameworkets funktionalitet, samt muligheden for at definere themes, som er samlinger a CSS, der styler alle elementer i et kursus, og som kan udskiftes, uden at kurset skal omskrives.<br> Og så er der et cloudbaseret forfatterværktøj, hvor man kan konstruere kurser i et UI uden erfaring med programmering.</p><p>Adapt har også mulighed for at oversætte kurser, men forfatterværktøjet kan kun håndtere ét kursus, så ønsker man flere sprog, kan kurset eksporteres, og ved hjælp af CLI scripts, kan tekster trækkes ud i CSV-filer, der kan oversættes og importeres til kurset igen, således at man kan lave kurser, der indeholder flere sprog.</p><p>Der er dig visse begrænsninger: Den indbyggede oversættelse kan kun håndtere tekster, ikke fx billeder og videoer.<br> Derfor har jeg lavet en udvidelse af det indbyggede CLI-oversættelsessystem, kaldet MABS (MOCH Adapt Build System – IT-verdenen kræver akronymer…).<br> Her kan man også håndtere sprogversionerede assets som videoer og billeder.</p><p>Senere er det udvidet til også at kunne anvende Adapts sprogfaciliteter til at lave et niveau over sprog, kaldet roller.<br> Her kan et kursus deles op i flere roller, således at kursisterne kan vælge en rolle, der matcher deres arbejdsopgaver og dermed kun få de relevante dele af kurset.</p><p>MABS lægger også en mere \"venlig\" skal udenom Adapt egne scripts, så systemet er mere tilgængeligt for personer, der ikek er vant til at arbejde i CLI.</p><p><em>Jeg har designet og implementeret systemet. Adapts egne scripts er skrevet i <a href='https://gruntjs.com/' target='_blank'>GRUNT-script</a>, der en baseret på NODE JS, men jeg valgte så vidt mulig at begrænse anvendelse af GRUNT og fortrinsvis bruge ren NODE JS. Også for at gøre det lettere, hvis værktøjet skulle konverteres til et NODE JS baseret onlineværktøj senere. Jeg har desuden defineret et YAML-baset filformat til en brugervenlig opsætning af en specifik kursusversion.</em></p>",
                "en": "<p>At a time when Flash was on its way out and most used HTML5 browsers, we decided to find a tool that could create courses in pure HTML5.</p><p>It had to be open so we had the opportunity to expand it ourselves, and preferably Open Source so we didn't become dependent on a single vendor.</p><p>We ended up using <a href='https://www.adaptlearning.org/' target='_blank'>Adapt Framework</a>, which also did away with the page-turner type of courses that Flash and tools like Captivate and Storyline had laid the groundwork for, and instead built courses in the same way as web pages that most had gradually become familiar with.</p><p>Adapt consists of a framework built as a core with a series of plug-ins that can define both UI components in the course and extensions of the framework's functionality, as well as the ability to define themes, which are collections a CSS that style all elements of a course and can be replaced without having to change the course.<br> And then there's a cloud-based authoring tool where you can construct courses in a UI with no programming experience.</p><p>Adapt also has the ability to translate courses, but the authoring tool can only handle one course, so if you want more languages, the course can be exported, and using CLI scripts, texts can be exported to CSV files that can be translated and re-imported into the course, so that you can create courses that contain multiple languages.</p><p>There are some restrictions: The built-in translation can only handle texts, not assets like pictures and videos.<br> That is why I have made an extension of the built-in CLI translation system called MABS (MOCH Adapt Build System – the IT world requires acronyms...).<br> Here you can also handle language-versioned assets such as videos and pictures.</p><p>Later, it's expanded to use Adapt's language capabilities to create a level above language, called roles.<br> Here, a course can be divided into several roles, so that students can choose a role that matches their daily tasks and thus only get the relevant parts of the course.</p><p>MABS also puts a more \"friendly\" shell around Adapt's own scripts, so the system is more accessible to people who are used to working in CLI.</p><p><em>I have designed and implemented the system. Adapt’s own scripts are written in <a href='https://gruntjs.com/' target='_blank'>GRUNT script</a>, which is based on NODE JS, but I chose as far as possible to limit the use of GRUNT and preferably use pure NODE JS. Also to make it easier if the tool were to be converted to a NODE JS based online tool later. I have also defined a YAML-based file format for a user-friendly setup of a specific course version.</em></p>"
            },
            "decade":"10",
            "year":"2017-2020",
            "image":"images/mabs.png",
            "video":"",
            "apptype": "tool",
            "role":"architect",
            "resources": {"da": "", "en": ""},
            "tech":["nodejs"]
        },
        {
            "id": 22,
            "name": {
                "da": "Adapt, Komponenter",
                "en": "Adapt, Components"
            },
            "description": {
                "da": "<p>På et tidspunkt da Flash var på vej ud, og de fleste anvender HTML5 browsere, besluttede vi at finde et værktøj, der kunne lave kurser i ren HTML5.</p> <p>Det måtte godt være åbent, så vi selv havde mulighed for at udvide på det, og gerne Open Source, så vi ikke blev afhængig af en én bestemt leverandør.</p> <p>Vi endte med at anvende <a href='https://www.adaptlearning.org/' target='_blank'>Adapt Framework</a>, som samtidigt gjorde op med page-turner typen af kurser, som Flash og værktøjer som Captivate og Storyline havde lagt grunden til, og i stedet opbyggede kurser på samme måde som web-sider, som de fleste efterhånden var blevet fortrolige med. </p> <p>Adapt består af et framework, der er opbygget som en kerne med en række plug-ins, der både kan definere UI komponenter i kurset, og udvidelser af frameworkets funktionalitet, samt muligheden for at definere themes, som er samlinger a CSS, der styler alle elementer i et kursus, og som kan udskiftes, uden at kurset skal omskrives.<br> Og så er der et cloudbaseret forfatterværktøj, hvor man kan konstruere kurser i et UI uden erfaring med programmering.</p> <p>Vi har, siden vi startede på at anvende Adapt, udviklet vores egne komponenter, hver gang et kursus havde et behov for en interaktionsform, der ikke var dækket af de eksisterende komponenter, eller manglede en fuktionalitet.</p> <p>Komponenterne udvikles i HTML5, JavaScript (senest op til ES8, da man nu anvender Babel transpileren til at sikre IE11-kompatibilitet) og CSS (i varianten LESS) ved at extende eksisterende Adapt komponentklasser. Der eksisterer en række funktioner og events, man kan gøre brug af, og til slut pakkes komponenten som en Bower-pakke.</p> <p><em>Jeg har stået for udviklingen af forskellige komponenter – bl.a. visning og interaktion med 3D-modeller i glTF-format, visning af videoer i browsernes egne afspillere og en publish/subscribe-broker, der lader komponenter kommunikere direkte med hinanden.</em></p>",
                "en": "<p>At a time when Flash was on its way out and most used HTML5 browsers, we decided to find a tool that could create courses in pure HTML5.</p> <p>It had to be open so we had the opportunity to expand it ourselves, and preferably Open Source so we didn't become dependent on a single vendor.</p> <p>We ended up using <a href='https://www.adaptlearning.org/' target='_blank'>Adapt Framework</a>, which also did away with the page-turner type of courses that Flash and tools like Captivate and Storyline had laid the groundwork for, and instead built courses in the same way as web pages that most had gradually become familiar with.</p> <p>Adapt consists of a framework built as a core with a series of plug-ins that can define both UI components in the course and extensions of the framework's functionality, as well as the ability to define themes, which are collections a CSS that style all elements of a course and can be replaced without having to change the course.<br> And then there's a cloud-based authoring tool where you can construct courses in a UI with no programming experience.</p> <p>Since we started using Adapt, we have developed our own components whenever a course needed an interaction form that was not covered by the existing components or was missing some functionality.</p> <p>Components are developed in HTML5, JavaScript (most recently up to ES8, since the Babel transpiler is now being used to ensure IE11 compatibility) and CSS (in the LESS variant), by extend existing Adapt component classes. There are a number of functions and events to use, and finally the component is packaged as a Bower package.</p> <p><em>I have developed various components - these include viewing and interacting with glTF 3D models, viewing videos in the browser's native players, and a publish/subscribe broker that lets components communicate directly with each other.</em></p>"
            },
            "decade":"10",
            "year":"2017-2020",
            "image":"images/adaptplugin.png",
            "video":"",
            "apptype": "component",
            "role":"architect",
            "resources": {"da": "", "en": ""},
            "tech":["htmlcssjs"]
        },
        {
            "id": 23,
            "name": {
                "da": "GDPR Kursus",
                "en": "GDPR Course"
            },
            "description": {
                "da": "<p>Dette kursus er udviklet i Adapt Frameworket, ved hjælp af det medfølgende Authoring Tool, og pakket i vores eget MABS build system.</p><p>Kurset var det første til at bryde Adapts lidt firkantede look, der kommer af, at et kursus er bygget op ved at samle adskilte komponenter, der hver især ender i deres egen \"&lt;div&gt; firkant\".</p><p>Dette skete dels gennem styling, der undgår at understrege dette look, og ved at udvikle extensions (plug-ins, der udvider frameworkets generelle funktionalitet), der arbejder \"henover\" komponenternes afgrænsninger – fx en Companion, som er en guide, der dukker op og som kan hjælpe med det, kursisten er i gang med – en kontekstafhængig hjælpefunktion.</p><p>Kurset er desuden lokaliseret til 13 sprog (dette er dog ikke rekorden, da vi har bygget et enkelt kursus, der kom på 21 sprog i samme pakke).</p><p><em>Jeg har stået for at udvikle plug-ins og MABS build systemet, der kan håndtere at få de mange sprog i samme kursuspakke, og som kan oprette roller i kurset, der tillader en kursist at logge ind med en rolle, og dermed kun se de dele af kurset, der er relevante for vedkommende.</p>",
                "en": "<p>This course was developed in the Adapt Framework, using the included Authoring Tool, and packaged in our own MABS build system.</p><p>The course was the first to try to break Adapt's slightly square look, which comes from a course being built by assembling separate components, each ending up in their own \"&lt;div&gt; square\".</p><p>This was done partly through styling that avoids emphasizing this look, and by developing extensions (plug-ins that extend the general functionality of the framework) that work \"across\" the components boundaries — e.g. a Companion, which is a guide that shows up and can help with what the student is doing – a context-dependent help feature.</p><p>The course is also localized to 13 languages (this is not the record however, as we have built a single course that came in 21 languages in the same package).</p><p><em>I have been in charge of developing plug-ins and the MABS build system that can handle packing the many languages in the same course package and can create roles in the course that allow a student to log in with a role, and thus only see those parts of the course that are relevant to them.</p>"
            },
            "decade":"10",
            "year":"2017-2020",
            "image":"",
            "video": "video/mochgdpr",
            "apptype": "course",
            "role":"developer",
            "resources": {"da": "", "en": ""},
            "tech":["htmlcssjs"]
        },
        {
            "id": 24,
            "name": {
                "da": "Adapt, tilpasning",
                "en": "Adapt, modification"
            },
            "description": {
                "da": "<p>På et tidspunkt da Flash var på vej ud, og de fleste anvender HTML5 browsere, besluttede vi at finde et værktøj, der kunne lave kurser i ren HTML5.</p><p>Det måtte godt være åbent, så vi selv havde mulighed for at udvide på det, og gerne Open Source, så vi ikke blev afhængig af en én bestemt leverandør.</p><p>Vi endte med at anvende <a href=' https://www.adaptlearning.org/' target='_blank'>Adapt Framework</a>, som samtidigt gjorde op med page-turner typen af kurser, som Flash og værktøjer som Captivate og Storyline havde lagt grunden til, og i stedet opbyggede kurser på samme måde som web-sider, som de fleste efterhånden var blevet fortrolige med. </p><p>Adapt består af et framework, der er opbygget som en kerne med en række plug-ins, der både kan definere UI komponenter i kurset, og udvidelser af frameworkets funktionalitet, samt muligheden for at definere themes, som er samlinger a CSS, der styler alle elementer i et kursus, og som kan udskiftes, uden at kurset skal omskrives.<br> Og så er der et cloudbaseret forfatterværktøj, hvor man kan konstruere kurser i et UI uden erfaring med programmering.</p><p>Hvor selve frameworket kan udvides gennem plugins, er forfatterværktøjet en NODE JS webapp, hvor man skal ind og rette i de eksisterende filer, hvis man vil ændre på noget.</p><p>Vi har i et par tilfælde haft ønske om, enten at tilføje funktionalitet, eller ændre på eksisterende funktionaliteter, hvor vi så har måttet rette i de eksisterende JavaScript-filer eller GRUNT-scripts.</p><p><em>Jeg har stået for tilføjelser til, og ændringer i forfatterværktøjet. Blandt andet mindre ting, som automatisk at tilføje publicerings-dato og -tid til det endelige kursusfilnavn og lidt større ændringer, som at udvide pakkesystemet til at understøtte SCORM 2004 kursuspakke standarden, ud over SCORM 1.2 standarden, som Adapt er født med.</em></p>",
                "en": "<p>At a time when Flash was on its way out and most used HTML5 browsers, we decided to find a tool that could create courses in pure HTML5.</p><p>It had to be open so we had the opportunity to expand it ourselves, and preferably Open Source so we didn't become dependent on a single vendor.</p><p>We ended up using <a href=' https://www.adaptlearning.org/' target='_blank'>Adapt Framework</a>, which also did away with the page-turner type of courses that Flash and tools like Captivate and Storyline had laid the groundwork for, and instead built courses in the same way as web pages that most had gradually become familiar with.</p><p>Adapt consists of a framework built as a core with a series of plug-ins that can define both UI components in the course and extensions of the framework's functionality, as well as the ability to define themes, which are collections a CSS that style all elements of a course and can be replaced without having to change the course.<br> And then there's a cloud-based authoring tool where you can construct courses in a UI with no programming experience.</p><p>Where the framework itself can be expanded through plugins, the authoring tool is a NODE JS web app where you need to edit the existing files if you want to change something.</p><p>In a few cases, we have wanted to either add functionality or change existing functionalities where we had to change existing JavaScript files or GRUNT scripts.</p><p><em>I have been responsible for add-ons and changes to the authoring tool. Among other things, minor changes like automatically adding the publishing date and time to the final course file name and slightly larger changes, like expanding the packing system to support the SCORM 2004 course package standard, in addition to the SCORM 1.2 standard that Adapt was born with.</em></p>"
            },
            "decade":"10",
            "year":"2017-2020",
            "image":"images/adaptmod.png",
            "video":"",
            "apptype": "framework",
            "role":"architect",
            "resources": {"da": "", "en": ""},
            "tech":["htmlcssjs", "nodejs"]
        },
        {
            "id": 25,
            "name": {
                "da": "IT Sikkehedskursus",
                "en": "Cyber Awareness Course"
            },
            "description": {
                "da": "<p>Dette kursus er udviklet i Adapt Frameworket, ved hjælp af det medfølgende Authoring Tool, og pakket i vores eget MABS build system.</p><p>Der er dels arbejdet med at lave et kursus, der kunne være en slags standardformat for firmaets egne \"hyldevare-kurser\" (i modsætning til kurser lavet for kunder), og med at inkludere en guide i kurset, der kan hjælpe undervejs.</p><p>Der er også udviklet en ny menu-type (også en plug-in), der hjælper kursisten med at få overblik i vedkommendes fremdrift.</p><p><em>Jeg har deltaget i udviklingen af de forskellige plug-ins.</em></p>",
                "en": "<p>This course was developed in the Adapt Framework, using the included Authoring Tool, and packaged in our own MABS build system.</p><p>It has been a goal to create a course that could be a kind of standard format for the company's own \"shelf-item courses\" (as opposed to courses made for customers), and to include a guide in the course to help along the way.</p><p>A new menu type (also a plug-in) has also been developed to help the student get a better overview of their progress.</p><p><em>I have participated in the development of the various plug-ins.</em></p>"
            },
            "decade":"10",
            "year":"2018-2020",
            "image":"",
            "video": "video/mochcyber",
            "apptype": "course",
            "role":"developer",
            "resources": {"da": "", "en": ""},
            "tech":["htmlcssjs"]
        },
        {
            "id": 26,
            "name": {
                "da": "Røde Kors, Familielivet i en kommune",
                "en": "Red Cross, Family life in a municipality"
            },
            "description": {
                "da": "<p>Dette kursus er udviklet i Adapt Frameworket, ved hjælp af det medfølgende Authoring Tool, og pakket i vores eget MABS build system.</p><p>Kurset, der skal fortælle flygtninge og indvandrere om hverdagen i en dansk kommune, er udviklet på flere sprog: dansk, arabisk, farsi, sorani og tigrinsk.</p><p>Da arabisk, farsi og sorani er RTL-sprog (læses fra højre mod venstre), var det en særlig udfordring at sikre, at alle vores Adapt plug-ins var forberedt på dette.</p><p>Al tekst er implementeret som UTF-8 og browserne har ikke nogen problemer med at rendere tekst på de forskellige RTL-sprog korrekt. Men alle UI-elementer i komponenter og andre plug-ins, skal skifte læseretning – et element der fx står foran starten af en tekst, skal stå enten til venstre eller højre for teksten, afhængigt af den aktuelle læseretning (og de skal selvfølgelig tilpasse sig, hvis kursisten skifter sprog og læseretning undervejs).</p><p><em>Jeg stod for tjek af de forskellige plug-ins, og rettelse af eventuelle problemer i forhold til RTL-tekster.</p></em>",
                "en": "<p>This course was developed in the Adapt Framework, using the included Authoring Tool, and packaged in our own MABS build system.</p><p>The course, which informs refugees and immigrants about everyday life in a Danish municipality, has been developed in several languages: Danish, Arabic, Farsi, Sorani and Tigrinya.</p><p>Since Arabic, Farsi and Sorani are RTL languages (read from right to left), it was a particular challenge to ensure that all of our Adapt plug-ins were prepared for this.</p><p>All text is implemented as UTF-8 and the browsers do not have any problems rendering text in the different RTL languages correctly. However, all UI elements in components and other plug-ins must change reading direction – an element that, for example, precedes the start of a text must be either to the left or right of the text, depending on the current reading direction (and they must of course adapt if the student changes language and reading direction along the way).</p><p><em>I was in charge of checking out the various plug-ins and fixing any issues with RTL texts.</p></em>"
            },
            "decade":"10",
            "year":"2019",
            "image":"",
            "video": "video/rodekorsfamilielivet",
            "apptype": "course",
            "role":"developer",
            "resources": {"da": "", "en": ""},
            "tech":["htmlcssjs"]
        },
        {
            "id": 27,
            "name": {
                "da": "ADHD, Kærlighed i Kaos",
                "en": "ADHD, Love in Chaos"
            },
            "description": {
                "da": "<p>Dette kursus er udviklet i Adapt Frameworket, ved hjælp af det medfølgende Authoring Tool, og pakket i vores eget MABS build system.</p><p>Kurset skal hjælpe især forældre til børn med ADHD i deres dagligdag.<br> Det er opbygget som en kursusrække, hvor hvert kursus er et modul, der omhandler et bestemt emne.<br> Kursisterne modtager hver uge adgang til et nyt modul, og hvert modul afsluttes med en opgave til den kommende uge, der skal konkretisere modulets indhold.</p><p>Modulerne er opbygget ensartet, med de samme vinkler på det aktuelle emne.</p><p><em>Min opgave var at opsætte et template-modul, som kunne sikre, at alle moduler ville have den samme struktur og funktionalitet, selv om de blev sat op af forskellige personer</em></p>",
                "en": "<p>This course was developed in the Adapt Framework, using the included Authoring Tool, and packaged in our own MABS build system.</p><p>The course is intended to help parents of children with ADHD in their daily lives.<br> It is structured as a course series, where each course is a module that deals with a specific topic.<br> Every week, users receive access to a new module, and each module finishes with a task for the coming week to concretize the contents of the module.</p><p>Modules are constructed uniformly, with the same angles on the current topic.</p><p><em>My task was to set up a template module to ensure that all modules would have the same structure and functionality, even if they were set up by different people</em></p>"
            },
            "decade":"10",
            "year":"2019",
            "image":"",
            "video": "video/adhdkik",
            "apptype": "course",
            "role":"developer",
            "resources": {"da": "", "en": ""},
            "tech":["htmlcssjs"]
        },
        {
            "id": 28,
            "name": {
                "da": "SKT, Tandmorfologi 3D",
                "en": "SKT, Dental Morphology 3D"
            },
            "description": {
                "da": "<p>Dette kursus er udviklet i Adapt Frameworket, ved hjælp af det medfølgende Authoring Tool, og pakket i vores eget MABS build system.</p><p>Det er den fjerde inkarnation af kurset og den anden udgave, jeg har stået for.<br> En særlig feature ved de senere versioner er, at en del af billedmaterialet er erstattet af 3D-modeller, som kursisterne kan rotere og få et bedre indtryk af, hvordan en specifik tand ser ud.</p><p>Den foregående udgave lavede jeg i vores eFrame Flash-framework, og 3D-modellerne var sat op i Unity 3D, som på det tidspunkt kunne eksportere til Flash, således at vi kunne interface med modellerne fra eFrame.</p><p>Denne version skal, på grund af Flash’ forestående bortgang, implementeres som HTML5. Derfor var en stor opgave at vælge og implementere en Adapt JavaScript 3D-komponent, som havde samme funktionalitet, som i Unity 3D/Flash-udgaven.</p><p>Jeg valgte three js API’et til at implementere komponenten, efter at have evalueret tre forskellige alternativer. Som model-format valgte jeg glTF i sin binære udgave (GLB), da det er udbredt på nettet og godt understøttet af three js. Ikke uvæsentligt er det også et åbent format. Vi har tidligere haft mange problemer med fx 3D Studio Max format og andre proprietære formater, der kan være en problem at arbejde med, uden for de programmer, de stammer fra.</p><p>Den resulterende komponent kan vise en 3D-model i Adapt, på samme måde, som man viser et billede eller en video. Komponenten forstår desuden en række kommandoer, der fx kan rotere modellen, fremhæve dele af den med farve og skjule delelementer. Og selvfølgelig kan modellen roteres med musen.</p><p>For at kunne bruge de features, som 3D-komponenter har for at manipulere modellen, udviklede jeg en publish/subscribe-broker extension til Adapt, som tillader andre komponenter at sende kommandoer til 3D-modellen. Fx kan et tekstfelt, via et indlejret HTML-link, sende en kommando til 3D-modellen, der fx roterer, zoomer og fremhæver en del af modellen med en farve.</p><p>PubSub-brokeren tillod også, at et link i teksten kunne åbne kursets ordliste, således at man kunne klikke på et fremhævet ord i teksten, og se dets definition i ordbogen.</p><p>Der er desuden et tilsvarende kursus \"Hovedets Anatomi 3D\", der på samme måde handler om kranier, kæber og lignende.</p><p><em>Jeg har stået for implementeringen af 3D-komponenten og publish/subscribe-broker extensionen, og integrationen af disse med de øvrige dele af kurset.</em></p>",
                "en": "<p>This course was developed in the Adapt Framework, using the included Authoring Tool, and packaged in our own MABS build system.</p><p>This is the fourth incarnation of the course and the second edition I have been in charge of.<br> A particular feature of the later versions is that part of the imagery has been replaced by 3D models that students can rotate and get a better idea of what a specific tooth looks like.</p><p>The previous edition I made in our eFrame Flash framework, and the 3D models were set up in Unity 3D, which at that time could export to Flash, so that we could interface with the models from eFrame.</p> Because of Flash's impending demise, this version must be implemented as HTML5. Therefore, a big task was to select and implement an Adapt JavaScript 3D component that had the same functionality as in the Unity 3D/Flash edition.</p><p>I chose the three js API to implement the component after evaluating three different alternatives. As a model format I chose glTF in its binary version (GLB) as it is widely used on the web and well supported by three js. Not insignificant, it's also an open format. We have previously had many problems with e.g. 3D Studio Max format and other proprietary formats that can be a problem to work with outside of the applications they originate from.</p> The resulting component can display a 3D model in Adapt, just as you show an image or video. The component also understands a number of commands that can, for example, rotate the model, highlight parts of it with color, and hide subelements. And of course the model can be rotated with the mouse.</p><p>In order to use the features that the 3D component have to manipulate the model, I developed a publish/subscribe-broker extension for Adapt that allows other components to send commands to the 3D model. For example, a text box, via an embedded HTML link, can send a command to the 3D model that, for example, rotates, zooms, and highlights a part of the model with a color.</p><p>The PubSub broker also allowed a link in the text to open the course glossary so that you could click a highlighted word in the text and see its definition in the glossary.</p><p>There is also a similar course \"Anatomy of the head \", which is about skulls, jawbones and the like.</p><p><em>I have been responsible for the implementation of the 3D component and the publish/subscribe-broker extension, and the integration of these with the other parts of the course.</em></p>"
            },
            "decade":"20",
            "year":"2020",
            "image":"",
            "video": "video/tandmorfologi",
            "apptype": "course",
            "role":"architect",
            "resources": {"da": "", "en": ""},
            "tech":["htmlcssjs"]
        }
    ]
}